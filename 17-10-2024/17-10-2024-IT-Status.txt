Indexing:

use face
switched to db face
db.sales.find()
{
 _id: 1,
 item: 'Americanos',
 price: 5,
 size: 'Short',
 quantity: 22,
 date: 2022-01-15T08:00:00.000Z
}
{
 _id: 2,
 item: 'Cappuccino',
 price: 6,
 size: 'Short',
 quantity: 12,
 date: 2022-01-16T09:00:00.000Z
}
{
 _id: 3,
 item: 'Lattes',
 price: 15,
 size: 'Grande',
 quantity: 25,
 date: 2022-01-16T09:05:00.000Z
}
{
 _id: 4,
 item: 'Mochas',
 price: 25,
 size: 'Tall',
 quantity: 11,
 date: 2022-02-17T08:00:00.000Z
}
{
 _id: 5,
 item: 'Americanos',
 price: 10,
 size: 'Grande',
 quantity: 12,
 date: 2022-02-18T21:06:00.000Z
}
{
 _id: 6,
 item: 'Cappuccino',
 price: 7,
 size: 'Tall',
 quantity: 20,
 date: 2022-02-20T10:07:00.000Z
}
{
 _id: 7,
 item: 'Lattes',
 price: 25,
 size: 'Tall',
 quantity: 30,
 date: 2022-02-21T10:08:00.000Z
}
{
 _id: 8,
 item: 'Americanos',
 price: 10,
 size: 'Grande',
 quantity: 21,
 date: 2022-02-22T14:09:00.000Z
}
{
 _id: 9,
 item: 'Cappuccino',
 price: 10,
 size: 'Grande',
 quantity: 17,
 date: 2022-02-23T14:09:00.000Z
}
{
 _id: 10,
 item: 'Americanos',
 price: 8,
 size: 'Tall',
 quantity: 15,
 date: 2022-02-25T14:09:00.000Z
}
db.sales.find({item:"latteds",size:"Tall"})
db.sales.find({item:"Lattes",size:"Tall"})
{
 _id: 7,
 item: 'Lattes',
 price: 25,
 size: 'Tall',
 quantity: 30,
 date: 2022-02-21T10:08:00.000Z
}
db.sales.find({item:"Lattes",size:"Tall"}).explain("executionStats")
     stage: 'COLLSCAN',
     filter: {
       '$and': [
         {
           item: {
             '$eq': 'Lattes'
           }
         },
         {
           size: {
             '$eq': 'Tall'
           }
         }
       ]
     },
     nReturned: 1,
     executionTimeMillisEstimate: 0,
     works: 11,
     advanced: 1,
     needTime: 9,
     needYield: 0,
     saveState: 0,
     restoreState: 0,
     isEOF: 1,
     direction: 'forward',
     docsExamined: 10
   }
 },
 command: {
   find: 'sales',
   filter: {
     item: 'Lattes',
     size: 'Tall'
   },
   '$db': 'face'
 },
 serverInfo: {
   host: 'LAPTOP-LE4QO1T0',
   port: 27017,
   version: '7.0.14',
   gitVersion: 'ce59cfc6a3c5e5c067dca0d30697edd68d4f5188'
 },
 serverParameters: {
   internalQueryFacetBufferSizeBytes: 104857600,
   internalQueryFacetMaxOutputDocSizeBytes: 104857600,
   internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
   internalDocumentSourceGroupMaxMemoryBytes: 104857600,
   internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
   internalQueryProhibitBlockingMergeOnMongoS: 0,
   internalQueryMaxAddToSetBytes: 104857600,
   internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
   internalQueryFrameworkControl: 'trySbeRestricted'
 },
 ok: 1
}
db.sales.createIndex({item:1})
item_1
db.sales.find({item:"Lattes",size:"Tall"})
{
 _id: 7,
 item: 'Lattes',
 price: 25,
 size: 'Tall',
 quantity: 30,
 date: 2022-02-21T10:08:00.000Z
}
db.sales.find({item:"Lattes",size:"Tall"}).explain("executionStats")
     docsExamined: 2,
       works: 3,
       advanced: 2,
       needTime: 0,
       needYield: 0,
       saveState: 0,
       restoreState: 0,
       isEOF: 1,
       keyPattern: {
         item: 1
       },
       indexName: 'item_1',
       isMultiKey: false,
       multiKeyPaths: {
         item: []
       },
       isUnique: false,
       isSparse: false,
       isPartial: false,
       indexVersion: 2,
       direction: 'forward',
       indexBounds: {
         item: [
           '["Lattes", "Lattes"]'
         ]
       },
       keysExamined: 2,
       seeks: 1,
       dupsTested: 0,
       dupsDropped: 0
     }
   }
 },
 command: {
   find: 'sales',
   filter: {
     item: 'Lattes',
     size: 'Tall'
   },
   '$db': 'face'
 },
 serverInfo: {
   host: 'LAPTOP-LE4QO1T0',
   port: 27017,
   version: '7.0.14',
   gitVersion: 'ce59cfc6a3c5e5c067dca0d30697edd68d4f5188'
 },
 serverParameters: {
   internalQueryFacetBufferSizeBytes: 104857600,
   internalQueryFacetMaxOutputDocSizeBytes: 104857600,
   internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
   internalDocumentSourceGroupMaxMemoryBytes: 104857600,
   internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
   internalQueryProhibitBlockingMergeOnMongoS: 0,
   internalQueryMaxAddToSetBytes: 104857600,
   internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
   internalQueryFrameworkControl: 'trySbeRestricted'
 },
 ok: 1
}
db.sales.getIndexes()
[
 { v: 2, key: { _id: 1 }, name: '_id_' },
 { v: 2, key: { item: 1 }, name: 'item_1' }
]
db.sales.dropIndex("item_1")
{ nIndexesWas: 2, ok: 1 }
db.sales.getIndexes()
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]
db.sales.createIndex({item:1})
item_1
db.sales.createIndex({item:1})
item_1
db.sales.getIndexes()
[
 { v: 2, key: { _id: 1 }, name: '_id_' },
 { v: 2, key: { item: 1 }, name: 'item_1' }
]
db.sales.createIndex({item:12)
SyntaxError: Unexpected token, expected "," (1:29)

> 1 | db.sales.createIndex({item:12)
    |                              ^
db.sales.createIndex({item:12})
item_12
db.sales.getIndexes()
[
 { v: 2, key: { _id: 1 }, name: '_id_' },
 { v: 2, key: { item: 1 }, name: 'item_1' },
 { v: 2, key: { item: 12 }, name: 'item_12' }
]
db.sales.find({item:"Cappuccino",size:"Tall"}).explain("executionStats")
     restoreState: 1,
     isEOF: 1,
     docsExamined: 3,
     alreadyHasObj: 0,
     inputStage: {
       stage: 'IXSCAN',
       nReturned: 3,
       executionTimeMillisEstimate: 37,
       works: 4,
       advanced: 3,
       needTime: 0,
       needYield: 0,
       saveState: 1,
       restoreState: 1,
       isEOF: 1,
       keyPattern: {
         item: 1
       },
       indexName: 'item_1',
       isMultiKey: false,
       multiKeyPaths: {
         item: []
       },
       isUnique: false,
       isSparse: false,
       isPartial: false,
       indexVersion: 2,
       direction: 'forward',
       indexBounds: {
         item: [
           '["Cappuccino", "Cappuccino"]'
         ]
       },
       keysExamined: 3,
       seeks: 1,
       dupsTested: 0,
       dupsDropped: 0
     }
   }
 },
 command: {
   find: 'sales',
   filter: {
     item: 'Cappuccino',
     size: 'Tall'
   },
   '$db': 'face'
 },
 serverInfo: {
   host: 'LAPTOP-LE4QO1T0',
   port: 27017,
   version: '7.0.14',
   gitVersion: 'ce59cfc6a3c5e5c067dca0d30697edd68d4f5188'
 },
 serverParameters: {
   internalQueryFacetBufferSizeBytes: 104857600,
   internalQueryFacetMaxOutputDocSizeBytes: 104857600,
   internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
   internalDocumentSourceGroupMaxMemoryBytes: 104857600,
   internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
   internalQueryProhibitBlockingMergeOnMongoS: 0,
   internalQueryMaxAddToSetBytes: 104857600,
   internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
   internalQueryFrameworkControl: 'trySbeRestricted'
 },
 ok: 1
}
db.sales.dropIndex("item_1")
{ nIndexesWas: 3, ok: 1 }
db.sales.dropIndex("item_12")
{ nIndexesWas: 2, ok: 1 }
db.sales.find({item:"Cappuccino",size:"Tall"}).explain("executionStats")
   },
   rejectedPlans: []
 },
 executionStats: {
   executionSuccess: true,
   nReturned: 1,
   executionTimeMillis: 0,
   totalKeysExamined: 0,
   totalDocsExamined: 10,
   executionStages: {
     stage: 'COLLSCAN',
     filter: {
       '$and': [
         {
           item: {
             '$eq': 'Cappuccino'
           }
         },
         {
           size: {
             '$eq': 'Tall'
           }
         }
       ]
     },
     nReturned: 1,
     executionTimeMillisEstimate: 0,
     works: 11,
     advanced: 1,
     needTime: 9,
     needYield: 0,
     saveState: 0,
     restoreState: 0,
     isEOF: 1,
     direction: 'forward',
     docsExamined: 10
   }
 },
 command: {
   find: 'sales',
   filter: {
     item: 'Cappuccino',
     size: 'Tall'
   },
   '$db': 'face'
 },
 serverInfo: {
   host: 'LAPTOP-LE4QO1T0',
   port: 27017,
   version: '7.0.14',
   gitVersion: 'ce59cfc6a3c5e5c067dca0d30697edd68d4f5188'
 },
 serverParameters: {
   internalQueryFacetBufferSizeBytes: 104857600,
   internalQueryFacetMaxOutputDocSizeBytes: 104857600,
   internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
   internalDocumentSourceGroupMaxMemoryBytes: 104857600,
   internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
   internalQueryProhibitBlockingMergeOnMongoS: 0,
   internalQueryMaxAddToSetBytes: 104857600,
   internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
   internalQueryFrameworkControl: 'trySbeRestricted'
 },
 ok: 1
}


Please enter a MongoDB connection string (Default: mongodb://localhost/): mongodb
mongodb
Current Mongosh Log ID: 6710df26619f649ea3c73bf7
Connecting to:          mongodb://127.0.0.1:27017/mongodb?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.1
Using MongoDB:          7.0.14
Using Mongosh:          2.3.1

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-10-14T08:37:47.556+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

Warning: Found ~/.mongorc.js, but not ~/.mongoshrc.js. ~/.mongorc.js will not be loaded.
  You may want to copy or rename ~/.mongorc.js to ~/.mongoshrc.js.
mongodb> show dbs
admin      40.00 KiB
cit       120.00 KiB
config     84.00 KiB
demo      208.00 KiB
employee  144.00 KiB
face       80.00 KiB
local      72.00 KiB
mongodb> use admin
switched to db admin
admin> db.createUser({user:"employee101",pwd:"123456",roles:[{role:"userAdmi
n",db:"faceprep"}]})
{ ok: 1 }
admin> db.createUser({user:"employee101",pwd:"123456",roles:[{role:"userAdmi

Uncaught:
SyntaxError: Unterminated string constant. (1:60)

> 1 | db.createUser({user:"employee101",pwd:"123456",roles:[{role:"userAdmi
    |                                                             ^
  2 |

admin> db.createUser({user:"employee101",pwd:"123456",roles:[{role:"userAdmin",db:"face"}]})
MongoServerError[Location51003]: User "employee101@admin" already exists
admin> db.createUser({user:"employee102",pwd:"123456",roles:[{role:"userAdmi
n",db:"face"}]})
{ ok: 1 }
admin> db.auth('employee101','123456')
{ ok: 1 }
admin> db.createUser(
... {
... user:"admin001",
... pwd:"admin001",
... roles:
... [
... { role:"readWrite",db:"face"},"clusterAdmin"]});
{ ok: 1 }
admin> db.createUser({user:"employee002",pwd:"employee002",roles:[]});
{ ok: 1 }
admin> db.getRoles()
{ roles: [], ok: 1 }
admin> db.getRoles({user:"employee102"});
MongoServerError[Location40415]: BSON field 'rolesInfo.user' is an unknown field.
admin>